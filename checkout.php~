<?php

// This file is the first step in the checkout process.
// It takes and validates the shipping information.
// This script is begun in Chapter 10.

// Require the configuration before any PHP code:
require('../config.inc.php');

// Check for the user's session ID, available in a cookie,to retrieve the cart contents:
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
	if (isset($_COOKIE['SESSION']) && (strlen($_COOKIE['SESSION']) === 32)) {
		$uid = $_COOKIE['SESSION'];
		// Use the cart ID as the session ID, and begin the session.
		session_id($uid);
		// Start the session:
		session_start();
	} 
	
	// If no session value was present in a cookie (for a GET request), redirect the user.
	else { 
		$location = 'http://' . BASE_URL . 'cart.php';
		header("Location: $location");
		exit();
	}
} 

// If the request method is not GET, start the session and retrieve the session ID
else { 
	session_start();
	$uid = session_id();
}

// Create an actual session for the checkout process...

// Require the database connection:
require (MYSQL);

// Validate the checkout form...

// For storing errors:
$shipping_errors = array();

// Check for a form submission to validate the first and last names:
if ($_SERVER['REQUEST_METHOD'] === 'POST') {

	// Check for Magic Quotes, us the stripslashes function to strip them out.
	if (get_magic_quotes_gpc()) {
		$_POST['first_name'] = stripslashes($_POST['first_name']);
		// Repeat for other variables that could be affected.
	}

	// Check for a first name, use to the addslashes function to make the values safe to us in the stored procedure call.
	if (preg_match ('/^[A-Z \'.-]{2,20}$/i', $_POST['first_name'])) {
		$fn = addslashes($_POST['first_name']);
	} else {
		$shipping_errors['first_name'] = 'Please enter your first name!';
	}
	
	// Check for a last name, use to the addslashes function to make the values safe to us in the stored procedure call.
	if (preg_match ('/^[A-Z \'.-]{2,40}$/i', $_POST['last_name'])) {
		$ln  = addslashes($_POST['last_name']);
	} else {
		$shipping_errors['last_name'] = 'Please enter your last name!';
	}
	
	// Check for and validate the street address:
	if (preg_match ('/^[A-Z0-9 \',.#-]{2,80}$/i', $_POST['address1'])) {
		$a1  = addslashes($_POST['address1']);
	} else {
		$shipping_errors['address1'] = 'Please enter your street address!';
	}

	// Check for and validate a second street address:
	if (empty($_POST['address2'])) {
		$a2 = NULL;
	} elseif (preg_match ('/^[A-Z0-9 \',.#-]{2,80}$/i', $_POST['address2'])) {
		$a2 = addslashes($_POST['address2']);
	} else {
		$shipping_errors['address2'] = 'Please enter your street address!';
	}
	
	// Check for and validate the city:
	if (preg_match ('/^[A-Z \'.-]{2,60}$/i', $_POST['city'])) {
		$c = addslashes($_POST['city']);
	} else {
		$shipping_errors['city'] = 'Please enter your city!';
	}
	
	// Check for and validate the state:
	if (preg_match ('/^[A-Z]{2}$/', $_POST['state'])) {
		$s = $_POST['state'];
	} else {
		$shipping_errors['state'] = 'Please enter your state!';
	}
	
	// Check for and validate the zip code:
	if (preg_match ('/^(\d{5}$)|(^\d{5}-\d{4})$/', $_POST['zip'])) {
		$z = $_POST['zip'];
	} else {
		$shipping_errors['zip'] = 'Please enter your zip code!';
	}
	
	// Check for and validate the phone number:
	// Strip out spaces, hyphens, and parentheses with the str_replace function
	$phone = str_replace(array(' ', '-', '(', ')'), '', $_POST['phone']);
	if (preg_match ('/^[0-9]{10}$/', $phone)) {
		$p  = $phone;
	} else {
		$shipping_errors['phone'] = 'Please enter your phone number!';
	}
	
	// Check for and validate the email address:
	if (filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) {
		$e = $_POST['email'];
		$_SESSION['email'] = $_POST['email'];
	} else {
		$shipping_errors['email'] = 'Please enter a valid email address!';
	}
	
	// Store the data in the session if the shipping information matches the billing:
	if (isset($_POST['use']) && ($_POST['use'] === 'Y')) {
		$_SESSION['shipping_for_billing'] = true;
		$_SESSION['cc_first_name']  = $_POST['first_name'];
		$_SESSION['cc_last_name']  = $_POST['last_name'];
		$_SESSION['cc_address']  = $_POST['address1'] . ' ' . $_POST['address2'];
		$_SESSION['cc_city'] = $_POST['city'];
		$_SESSION['cc_state'] = $_POST['state'];
		$_SESSION['cc_zip'] = $_POST['zip'];
	}

	// If everything's OK and no errors occurred, add the user to the database.
	if (empty($shipping_errors)) {
		
		// Add the user to the database buy calling the stored procedure 'add_customer'.
		$r = mysqli_query($dbc, "CALL add_customer('$e', '$fn', '$ln', '$a1', '$a2', '$c', '$s', $z, '$p', @cid)");

		// Confirm that the stored procedure was called properly.
		if ($r) {

			// Retrieve the customer ID:
			$r = mysqli_query($dbc, 'SELECT @cid');
			
			// To get the customer ID generated by the stored procedure, a second query must select @cid.
			if (mysqli_num_rows($r) == 1) {

				list($_SESSION['customer_id']) = mysqli_fetch_array($r);
					
				// Redirect the customer to the billing page.
				$location = 'https://' . BASE_URL . 'billing_stripe.php';
				header("Location: $location");
				exit();
			}
		}

		// If there was a problem, log the error, send an email, panic!
		trigger_error('Your order could not be processed due to a system error. We apologize for the inconvenience.');
	} 
	// Errors occurred IF.
} 
// End of REQUEST_METHOD IF.
							
// Include the header file:
$page_title = 'Coffee - Checkout - Your Shipping Information';
include('./includes/checkout_header.html');

// Retrieve the shopping cart contents:
$r = mysqli_query($dbc, "CALL get_shopping_cart_contents('$uid')");

 // Products to show from the customer's cart.
if (mysqli_num_rows($r) > 0) {
	include('./views/checkout.html');
} 

// If the cart was empty.
else { 
	include('./views/emptycart.html');
}

// Finish the HTML page:
include('./includes/footer.html');
?>